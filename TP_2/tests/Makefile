# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../../gtest/googletest

# Where to find user code.
USER_DIR = ../src
USER_HEADERS = ../header

INC_CMDS=$(USER_HEADERS)/parser/comando.hpp \
	$(USER_HEADERS)/parser/helpcmd.hpp \
	$(USER_HEADERS)/parser/findcmd.hpp \
	$(USER_HEADERS)/parser/storecmd.hpp \
	$(USER_HEADERS)/parser/entercmd.hpp
OBJS_PARSER=obj/lexico.o obj/sintatico.o \
			obj/comando.o obj/helpcmd.o obj/findcmd.o obj/storecmd.o obj/entercmd.o

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -I$(USER_HEADERS)

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -I$(USER_HEADERS)

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = build/test.out

TESTS_OBJS = obj/message.o obj/msgfct.o obj/message_test.o \
			 obj/parser.o obj/parser_test.o

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) obj/gtest.a obj/gtest_main.a obj/*.o build/*.out

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
obj/gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

obj/gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

obj/gtest.a : obj/gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

obj/gtest_main.a : obj/gtest-all.o obj/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

obj/message.o: $(USER_HEADERS)/message.hpp $(USER_DIR)/message.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/message.cpp -o $@

obj/msgfct.o: $(USER_HEADERS)/message.hpp $(USER_HEADERS)/msgfct.hpp $(USER_DIR)/msgfct.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/msgfct.cpp -o $@

obj/message_test.o: src/message_test.cpp $(USER_HEADERS)/message.hpp \
	 				$(USER_HEADERS)/msgfct.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c src/message_test.cpp -o $@

obj/lexico.o: $(USER_HEADERS)/parser/lexico.hpp $(USER_DIR)/lexico.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $(USER_DIR)/lexico.cpp

obj/sintatico.o: $(USER_HEADERS)/parser/lexico.hpp $(INC_CMDS)\
	$(USER_HEADERS)/parser/sintatico.hpp $(USER_DIR)/sintatico.cpp
		$(CXX) $(CXXFLAGS) -c -o $@ $(USER_DIR)/sintatico.cpp

obj/comando.o: $(USER_HEADERS)/parser/comando.hpp $(USER_DIR)/comando.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $(USER_DIR)/comando.cpp

obj/helpcmd.o: $(USER_HEADERS)/parser/comando.hpp $(USER_HEADERS)/parser/helpcmd.hpp $(USER_DIR)/helpcmd.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $(USER_DIR)/helpcmd.cpp

obj/findcmd.o: $(USER_HEADERS)/parser/comando.hpp $(USER_HEADERS)/parser/findcmd.hpp $(USER_DIR)/findcmd.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $(USER_DIR)/findcmd.cpp

obj/storecmd.o: $(USER_HEADERS)/parser/comando.hpp $(USER_HEADERS)/parser/storecmd.hpp $(USER_DIR)/storecmd.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $(USER_DIR)/storecmd.cpp

obj/entercmd.o: $(USER_HEADERS)/parser/comando.hpp $(USER_HEADERS)/parser/entercmd.hpp $(USER_DIR)/entercmd.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $(USER_DIR)/entercmd.cpp

obj/parser.o: $(USER_HEADERS)/parser/sintatico.hpp $(USER_HEADERS)/parser/parser.hpp $(USER_DIR)/parser.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $(USER_DIR)/parser.cpp

obj/parser_test.o: src/parser_test.cpp $(USER_HEADERS)/parser/parser.hpp \
				$(INC_CMDS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c src/parser_test.cpp -o $@

build/test.out: $(TESTS_OBJS) $(OBJS_PARSER) obj/gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
